package no06;

import java.lang.reflect.Field;
import java.util.ArrayList;
import java.util.List;

public class no6 {

	public static void main(String[] args) {
		 String StrInt="10",StrFloat="10",StrLong="10",StrDouble="10";
		 
		 int MyInt1=0, MyInt2=0;
		 float MyFloat1=0, MyFloat2=0;
		 long MyLong1=0,MyLong2=0;
		 double MyDouble1=0, MyDouble2=0;
			 
		 // 二種作法, 一為valueOf,一為parseInt
		 //整數
		 MyInt1=Integer.valueOf(StrInt);
		 MyInt2=Integer.parseInt(StrInt);
		 //浮點數
		 MyFloat1=Float.valueOf(StrFloat);
		 MyFloat2=Float.parseFloat(StrFloat);
		 //長整數
		 MyLong1=Long.valueOf(StrLong);
		 MyLong2=Long.parseLong(StrLong);
		 //倍精度浮點數
		 MyDouble1=Double.valueOf(StrDouble);
		 MyDouble2=Double.parseDouble(StrDouble);
		 
		 //做一個串列來放上面的物件變數。 因為物件變數型別都不一樣.
		 //所以使用 大家的爸爸-國民父親 Object類別來宣告.
		 List<Object> MyNumber=new ArrayList<>();
		 MyNumber.add(MyInt1);MyNumber.add(MyInt2);
		 MyNumber.add(MyFloat1);MyNumber.add(MyFloat2);
		 MyNumber.add(MyLong1);MyNumber.add(MyLong2);
		 MyNumber.add( MyDouble1);MyNumber.add(MyDouble2);

		 //做一個函式(方法),印出來看看囉
		 PrintListContent(MyNumber);

	}
	
	// 做一個可以接收任何型型的list串列,用來印東東.
	// 打? 代表型別可以是Object, String, Integer,.....任何型
	public static void PrintListContent(List<Object> MyList) {		
		for (var elements: MyList) {
			if (elements.getClass().getSimpleName()=="Integer" || elements.getClass().getSimpleName()=="Long")
				System.out.printf("型別:%s,值:%s", elements.getClass().getSimpleName(),elements.toString());
			else
				System.out.printf("型別:%s,值:%s", elements.getClass().getSimpleName(),elements.toString());
	
		}
		/*
		 * 			if (elements.getClass()==Integer )
            System.out.printf("型別:%s,名稱:%s,值:%d", elements.getClass(),elements.toString(),elements);	
		 * 
		 */
	}

	public static void setAllComponetsName(Object elements) {
		Field[] fields = elements.getClass().getDeclaredFields();
		for(int i = 0 , len = fields.length; i < len; i++) {
			   try {
				      String varName = fields[i].getName();
       				  // 獲取原來的訪問控制權限
		     		  boolean accessFlag = fields[i].isAccessible();
			     	  // 修改訪問控制權限
				      fields[i].setAccessible(true);
				      // 獲取在物件f中屬性fields[i]對應的物件中的變數
				      Object o = fields[i].get(elements);
				      System.out.println("傳入的物件中包含一個如下的變數: " + varName + " = " + o);
				      // 恢復訪問控制權限
			       	  fields[i].setAccessible(accessFlag);
			       	} 
			  catch (IllegalArgumentException ex) 
			           {
				          ex.printStackTrace(); } 
			  catch (IllegalAccessException ex)
			       {
				       ex.printStackTrace(); }
			
			} //end for

		}
	}

